name: 自动部署 SAP-企业版

on:
  workflow_dispatch:  # 只允许手动触发
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      region:
        description: '选择部署区域'
        required: true
        default: 'AP-SY'  # 默认值修改为第一个 AWS 区域
        type: choice
        options:
          # Amazon Web Services (AWS)
          - AP-SY  # Australia (Sydney) AWS
          - BR-SP  # Brazil (São Paulo) AWS
          - AP-SE  # South Korea (Seoul) - AWS
          - CA-MO  # Canada (Montreal)
          - US-VA  # US East (VA) - AWS
          - US-OR  # US West (OR)
          - EU-FR  # Europe (Frankfurt) - AWS
          - JP-TO  # Japan (Tokyo) AWS
          - AP-SG  # Singapore - AWS
          # Google Cloud Platform
          - AP-SYG # Australia (Sydney) GCP
          - BR-SPG # Brazil (São Paulo) GCP
          - US-IA  # US Central (IA)
          - EU-FRG # Europe (Frankfurt) GCP
          - JP-OS  # Japan (Osaka) GCP
          - JP-TO-G # Japan (Tokyo) GCP
          - IL-TA  # Israel (Tel Aviv) GCP
          - IN-MU  # India (Mumbai) GCP
          - SA-DMG # KSA (Dammam) GCP
          # Microsoft Azure
          - AP-SYA # Australia (Sydney) Azure
          - BR-SPA # Brazil (São Paulo) Azure
          - CA-TB  # Canada TBD
          - US-VAA # US East (VA) Azure
          - US-WA  # US West (WA)
          - EU-NE  # Europe (Netherlands)
          - JP-TO-A # Japan (Tokyo) Azure
          - AP-SGA # Singapore - Azure
          # SAP (Neo)
          - AE-DU  # UAE (Dubai)
          - SA-DM  # KSA (Riyadh)
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE || 'ghcr.io/eooce/nodejs:main' }}
  MEMORY: 512M

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: Determine CF API endpoint and app name
      run: |
        # 设置API端点
        if [ "${{ github.event.inputs.region }}" = "AP-SY" ]; then
          echo "CF_API=https://api.cf.ap10.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-sy$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "BR-SP" ]; then
          echo "CF_API=https://api.cf.br10.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-sp$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "AP-SE" ]; then
          echo "CF_API=https://api.cf.ap12.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-se$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "CA-MO" ]; then
          echo "CF_API=https://api.cf.ca10.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-mo$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "US-VA" ]; then
          echo "CF_API=https://api.cf.us10.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-va$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "US-OR" ]; then
          echo "CF_API=https://api.cf.us11.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-or$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "EU-FR" ]; then
          echo "CF_API=https://api.cf.eu10.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-fr$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "JP-TO" ]; then
          echo "CF_API=https://api.cf.jp10.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-to$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "AP-SG" ]; then
          echo "CF_API=https://api.cf.ap11.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="aws-sg$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "AP-SYG" ]; then
          echo "CF_API=https://api.cf.ap30.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-sy$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "BR-SPG" ]; then
          echo "CF_API=https://api.cf.br30.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-sp$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "US-IA" ]; then
          echo "CF_API=https://api.cf.us30.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-ia$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "EU-FRG" ]; then
          echo "CF_API=https://api.cf.eu30.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-fr$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "JP-OS" ]; then
          echo "CF_API=https://api.cf.jp30.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-os$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "JP-TO-G" ]; then
          echo "CF_API=https://api.cf.jp31.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-to$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "IL-TA" ]; then
          echo "CF_API=https://api.cf.il30.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-ta$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "IN-MU" ]; then
          echo "CF_API=https://api.cf.in30.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-mu$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "SA-DMG" ]; then
          echo "CF_API=https://api.cf.sa31.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="gcp-dm$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "AP-SYA" ]; then
          echo "CF_API=https://api.cf.ap20.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-sy$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "BR-SPA" ]; then
          echo "CF_API=https://api.cf.br20.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-sp$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "CA-TB" ]; then
          echo "CF_API=https://api.cf.ca20.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-ca$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "US-VAA" ]; then
          echo "CF_API=https://api.cf.us21.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-va$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "US-WA" ]; then
          echo "CF_API=https://api.cf.us20.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-wa$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "EU-NE" ]; then
          echo "CF_API=https://api.cf.eu20.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-ne$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "JP-TO-A" ]; then
          echo "CF_API=https://api.cf.jp20.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-to$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "AP-SGA" ]; then
          echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="az-sg$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "AE-DU" ]; then
          echo "CF_API=https://api.neo-ae1.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="neo-ae$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "SA-DM" ]; then
          echo "CF_API=https://api.neo-sa1.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="neo-sa$RANDOM_STR"
        fi
        
        # 设置应用名称（如果用户提供了则使用，否则使用默认）
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        else
          echo "APP_NAME=$DEFAULT_APP_NAME" >> $GITHUB_ENV
        fi
        
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"

    - name: Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"

        # 获取组织列表
        ORG=$(cf orgs | sed -n '4p')
        echo "Selected org: $ORG"
        echo "ORG=$ORG" >> $GITHUB_ENV

        # 获取空间列表
        SPACE=$(cf spaces | sed -n '4p')
        echo "Selected space: $SPACE"
        echo "SPACE=$SPACE" >> $GITHUB_ENV

        # 使用获取的组织和空间重新登录
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

    - name: Deploy application
      run: |
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} --health-check-type port

    - name: Set environment variables
      run: |
        # 基础环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP || 'cf.877774.xyz' }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        # 可选：从文件读取环境变量(如果存在)
        if [ -f .env ]; then
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
              IFS='=' read -r key value <<< "$line"
              cf set-env ${{ env.APP_NAME }} "$key" "$value"
            fi
          done < .env
        fi

        # 如果 DOCKER_IMAGE 是否包含 xhttp、goxhttp、ws 等关键词说明为直连镜像
        if [[ "${{ secrets.DOCKER_IMAGE }}" =~ (xhttp|goxhttp|ws) ]]; then
          # 获取应用路由
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            echo "设置 DOMAIN 环境变量为: $ROUTE"
            cf set-env ${{ env.APP_NAME }} DOMAIN "$ROUTE"
          else
            echo "⚠️ 未找到应用路由，无法设置 DOMAIN,请手动将节点里的address、host和sni改为应用域名"
          fi
        fi
        
    - name: Restage application
      run: |
        cf restage ${{ env.APP_NAME }}

    - name: Verify deployment
      run: |
        cf app ${{ env.APP_NAME }}
        echo "Deployment completed successfully!"

    - name: 详细部署信息
      run: |
        echo "🚀 部署完成！详细信息如下："
        echo "区域(Region): ${{ github.event.inputs.region }}"
        echo "组织(ORG): ${{ env.ORG }}"
        echo "空间(SPACE): ${{ env.SPACE }}"
        echo "应用名称(App Name): ${{ env.APP_NAME }}"

        # 获取应用路由
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        if [ -n "$ROUTE" ]; then
          echo "应用 URL (APP_URL): https://$ROUTE"
        else
          echo "⚠️ 未找到应用路由，请检查部署状态。"
        fi
